angular.module('contractPie', [])
  //  done
  .controller('PieCtrl', ['Categories', 'GetChartData', 'DatabaseService', 'byPropertyFilter', function (Categories, GetChartData, DatabaseService, byPropertyFilter) {
    var jsonData = GetChartData.get();
    Categories.contractData(jsonData);
    Categories.set('begindate', { special: 'beginyear' });
    Categories.set('agency');

    $scope.dateChartData = Categories.get({
      category: 'begindate',
      format: 'PieData',
      aggregator: 'totalcontractamt'
    });
    $scope.dateChartConfig = { title: 'By Year' };
    
    $scope.agencyChartData = Categories.get({
      category: 'agency',
      format: 'PieData',
      aggregator: 'totalcontractamt'
    });
    $scope.agencyChartConfig = { title: 'By Agency' };
  }])

  //  done
  .controller('DetailCtrl', ['Categories', function (Categories) {
    $scope.categoryData = Categories.list();
    for (var i =0; i < $scope.categoryData.length; i++) {
      $scope.detailedViewsArray.push(Categories.get({
        category: category,
        format: "DetailData"
      }));
    }
  }])
  
  //  done
  .factory('GoogleChartLoader', ['$q', '$rootScope', '$window', function ($q, $rootScope, $window) {
    var deferred = $q.defer();
    
    $window.google.load('visualization', '1', {
      packages: ['corechart'],
      callback: function () {
        $rootScope.$apply(function () {
          deferred.resolve();
        });
      }
    });
    
    return deferred.promise;
  }])

  //  done
  .factory('GetChartData', ['$q', '$http', 'DatabaseService', function ($q, $http, DatabaseService) {
    return {
      get: function () {
        var contractData;
        var dbGetter = $q.defer();
        
        if (DatabaseService.exists()) {
          DatabaseService.get()
            .then(function (dbResponseContracts) {
              dbGetter.resolve(dbResonseContracts);
            });
        } else {
          $http.get('https://data.baltimorecity.gov/resource/e7gh-hui5.json')
            .then(DatabaseService.insert(jsonReponse))
            .then(DatabaseService.get())
            .then(function (dbResponseContracts) {
              dbGetter.resolve(dbResponseContracts);
            });
        }

        return dbGetter.promise;
      }
    };
  }])
  
  //  done
  .factory('DatabaseService', ['$window', function (window) {
    testJson = function (jsonData) {
      try {
        JSON.parse(jsonData);
      } catch (e) {
        return false;
      }
      return true;
    };
    
    return {
      get: function () {
        return $q(function (resolve, reject) {
          var jsonData = $window.localStorage.getItem('contractPieData');
          if (jsonData === null) {
            reject('could not retrieve jsonData: ' + jsonData);
          } else {
            resolve(jsonData);
          }
        });
      },
      insert: function (jsonData) {
        return $q(function (resolve, reject) {
          if (testJson(jsonData)) {
            resolve($window.localStorage.setItem(json));
          } else {
            reject('the file is not valid JSON');
          }
        });
      },
      exists: function () {
        if (testJson($window.localStorage.getItem('contractPieData'))) {
          return true;
        } else {
          return false;
        }
      }
    };
  }])
  
  //  done
  .factory('Categories', 'byPropertyFilter', [function (Categories, byPropertyFilter) {
    var dataPrepare = {
      PieData: function (options, category) {
        var pieData;
        var redux = function (prev, curr) { return prev + curr[options.aggregator]; };
        for (var i = 0; i < category.length; i++) {
          var sumOfAggregator = category[i].reduce(redux, 0);  //  this might be broken; I think this is the right syntax, but....
          pieData.push([category[i][options.category], sumOfAggregator]);
        }
        
        return [options.category, options.aggregator].concat(pieData);
      },
      DetailData: function (options, category) {
        var detailData;
        for (var i = 0; i < category.length; i++) {
          detailData.push([category[i][options.category], category[i]]);
        }
        return detailData;
      }
    };

    var categories;
    var jsonData;
    return {
      contractData: function (jsonData) {
        contracts = JSON.parse(jsonData);
        //  begin/end date are unix epochs; need year numbers for proper sorting
        for (var i = 0; i < contracts.length; i++) {
          contracts[i].beginyear = new Date(contracts[i].begindate).getFullYear();
          contracts[i].endyear = new Date(contracts[i].enddate).getFullYear();
        }
      },
      get: function (options) {
        var final = dataPrepare[options.format](options, categories[options.category]);
        return final;
      },
      set: function (category, options) {
        //  category is a category name ('agency') and the subCategories is a list of different agencies ('mayor's office)
        var subCategories;
        var i, j;
        
        for (i = 0; i < contracts.length; i++) {
          subCategories[contracts[i][category]] = 1;
        }
        subCategories = Object.keys(subCategories);
        
        for (i = 0; i < subCategories.length; i++) {
          for (j = 0; j < contracts.length; j++) {
            if (contracts[j][category] === subCategories[i]) {
              categories[category][subCategories[i]].push(contracts[j]);
            }
          }
        }
      },
      list: function () {
        return Object.keys(categories);
      }
    };
  }])
  
  
  //  done
  .directive('detailWidget', [function () {
    return {
      restrict: 'A',
      scope: {
        detailData: '=',
        detailConfig: '='
      },
      template: '<div ng-repeat="data in detail-data">' +
                  '<div ng-repeat="contract in data">' +
                    '<span>contract.agency</span>' +
                    ' -- <span>Begin: contract.beginyear</span>' +
                    ' -- <span>End: contract.endyear</span>' +
                    ' | <span>Value: contract.totalcontractamt</span>' +
                  '</div>' +
                '<div>'
    };
  }])
  

  //  done
  .directive('pieChartWidget', ['GoogleChartLoader', function (GoogleChartLoader) {
    var arrayToDataTable = function (data) { return google.visualization.arrayToDataTable(data) };
    
    return {
      restrict: 'A',
      scope: {
        chartData: '=',
        chartConfig: '='
      },
      link: function ($scope, $element) {
        googleChartLoader.then(function () {
          var chart = new google.visualization.PieChart($element[0]);
        });
      }
    };
  }]);

  //  done; REDUNDANT??????????????????
//  .filter('byProperty', [function () {
//    return function (contractObject, property) {
//      if (contractObject.hasOwnProperty(property)) { return contractObject; }
//    };
//  }])
